{% assign collection = collections.all %}

{% comment %} make sure length of products {% endcomment %}
{% assign product_per_page = 1 %}
{% assign available_product_per_page = 1 %}
{% for product in collection.products%}
  {% assign product_per_page = product_per_page | plus: 1 %}
  {% if product.available %}
    {% assign available_product_per_page = available_product_per_page | plus: 1 %}
    {% if available_product_per_page == 8 %}
      {% break %}
    {% endif %}
  {% endif %}
{% endfor %}

{% paginate collection.products by product_per_page %}

<div class="gap-main-border">
  <div class="main-border">
    <div class="top-menu">
      <div class="top-menu-right">
        <h1 class="title">{{ collection.title }}</h1>
        <button class="hamburger">
          <span></span>
          <span></span>
          <span></span>
        </button>
      </div>
      <div class="top-menu-left">
        <div class="top-menu-content">
          <a href="{{ paginate.previous.url }}">
            <div class="button">BACK</div>
          </a>
          <a href="{{ paginate.next.url }}">
            <div class="button">NEXT</div>
          </a>
        </div>
        <div class="top-menu-content">
          <div id="cartbtn" class="button">
            <a>CART</a>
          </div>
          <div class="buckscc-currency-box button"></div>
        </div>
      </div>
    </div>
    <div class="bar">
      <div class="left-bar">
        <nav role="navigation">
          {% for link in linklists.main-menu.links %}
            <div class="widget-left-bar">
              <a href="/" {% if link.active %}aria-current="page"{% endif %}>
                <h2>{{ link.title }}</h2>
              </a>
              {% if link.links != blank %}
                <ul class="product-list">
                  {% for child_link in link.links %}
                    <li>
                      <a href="{{ child_link.url }}" {% if child_link.active %}aria-current="page"{% endif %}>
                        {{ child_link.title }}
                      </a>
                      {% if child_link.links != blank %}
                        <ul>
                          {% for grandchild_link in child_link.links %}
                            <li>
                              <a href="{{ grandchild_link.url }}" {% if grandchild_link.active %}aria-current="page"{% endif %}>
                                {{ grandchild_link.title }}
                              </a>
                            </li>
                          {% endfor %}
                        </ul>
                      {% endif %}
                    </li>
                  {% endfor %}
                </ul>
              {% endif %}
            </div>
          {% endfor %}
        </nav>
      </div>
      <div class="main-right-bar">
        <ul id="products-list"></ul>
      </div>
    </div>
    <div class="flex bottom-content">
      <div class="about" align="right">
        <a href="https://theblotter-room.com/pages/about">About</a>
        <a>•</a>
        <a href="https://theblotter-room.com/pages/privacy-policy">Privacy & Policy</a>
        <a>•</a>
        <a href="https://theblotter-room.com/pages/terms-condition">Terms & Conditions</a>
        <a>•</a>
        <a href="https://theblotter-room.com/pages/contact">Contact</a>
      </div>
      <div class="pagination">
        <div class="page-number">{{ paginate | default_pagination: next: ' ', previous: ' ' }}</div>
      </div>
    </div>
  </div>
</div>

{% endpaginate %}

<script>
  var collectionProducts = {{ collection.products | json }};
  var dataCollectionProducts = [];
  
  // get the available products
  for (let i = 0; i < collectionProducts.length; i++) {
    if (collectionProducts[i].available == true) {
      dataCollectionProducts.push(collectionProducts[i]);
    }
  }
  
  // sorting of available products by created at
  dataCollectionProducts.sort(function(a, b) {
    if (a.created_at > b.created_at) {
      return -1;
    } else if (a.created_at < b.created_at) {
      return 1;
    } else {
      return 0;
    }
  });

  // Retrieve the last displayed page number from localStorage (if available)
  // put parameter url now
  const queryUrlString = window.location.search;
  const urlParams = new URLSearchParams(queryUrlString);

  // Retrieve the last displayed page number from localStorage (if available)
  let pagePaginate = 0;
  if(Number(urlParams.get('page')) > 0) {
    pagePaginate = Number(urlParams.get('page')) - 1; // for make the first index of paginate start by 0
  }
  
  // back button
  $(document).on('click', '#back-page', function() {
    if (pagePaginate == 0) {
      console.log("page number 1 mtfck");
    } else {
      pagePaginate -= 1;
      console.log("back button clicked");
      console.log("page number -1 mtfck");
      updateProductList(); // Display the previous page of products
    }
  });
  
  // next button
  $(document).on('click', '#next-page', function() {
    if (dataCollectionProducts.length / 8 <= pagePaginate * 8) {
      console.log("next page is undefined mtfck");
    } else {
      pagePaginate += 1;
      console.log("next button clicked");
      console.log("page number +1 mtfck");
      updateProductList(); // Display the next page of products
    }
  });
  
  // Function to update the product list
  function updateProductList() {
    let shopLink = window.location.origin + window.location.pathname;
    let productsList = document.getElementById('products-list');
    productsList.innerHTML = ""; // Clear the existing product list
    let displayed_products_top = 0;
  
    // Preload the product list items
    for (let j = 0 + (pagePaginate * 8); j < (pagePaginate + 1) * 8; j++) {
      let listItem = document.createElement('li');
  
      if (displayed_products_top < 4) {
        listItem.classList.add('border');
      } else {
        listItem.classList.add('border');
        listItem.classList.add('border-product-5');
      } displayed_products_top++;
  
      let productLink = document.createElement('a');
      productLink.classList.add('product-card');
      productLink.classList.add('hide');
      productLink.href = shopLink + "products/" + dataCollectionProducts[j].handle;
  
      let productImage = document.createElement('img');
      productImage.classList.add('product-image');
      productImage.src = dataCollectionProducts[j].featured_image;
  
      let productText = document.createElement('p');
      productText.classList.add('text-product');
      productText.innerHTML = dataCollectionProducts[j].title.substr(0, 38) + '<br>';
  
      let priceSpan = document.createElement('span');
      priceSpan.classList.add('original-price');
  
      let childPriceSpan = document.createElement('span');
      childPriceSpan.classList.add('money');
      childPriceSpan.innerHTML = dataCollectionProducts[j].price / 100; // for rounded 2 zero after coma
  
      let comparePriceSpan = document.createElement('span');
      comparePriceSpan.classList.add('compare-price');
  
      let childComparePriceSpan = document.createElement('span');
      childComparePriceSpan.classList.add('money');
  
      if (dataCollectionProducts[j].compare_at_price > dataCollectionProducts[j].price) {
        childComparePriceSpan.innerHTML = dataCollectionProducts[j].compare_at_price / 100; // for rounded 2 zero after coma
        productText.appendChild(comparePriceSpan);
        comparePriceSpan.appendChild(childComparePriceSpan);
        priceSpan.innerHTML = '<br>';
      }
  
      priceSpan.appendChild(childPriceSpan);
      productText.appendChild(priceSpan);
      productLink.appendChild(productImage);
      productLink.appendChild(productText);
      listItem.appendChild(productLink);
  
      productsList.appendChild(listItem);
    }
    localStorage.setItem('currentPage', pagePaginate);
  }
  
  // Initial load of the product list
  document.addEventListener('DOMContentLoaded', updateProductList);
  
  // loading a products
  document.addEventListener("DOMContentLoaded", function() {
  // Check if div with class "bucks-selected" exists
  const bucksSelectedDiv = document.querySelector(".bucks-selected");
  
  if (bucksSelectedDiv) {
    // If div with class "bucks-selected" exists, find and remove the "hide" class from another div
    const divToRemoveHideClass = document.querySelector(".hide");
    if (divToRemoveHideClass) {
      divToRemoveHideClass.classList.remove("hide");
    }
  }
</script>